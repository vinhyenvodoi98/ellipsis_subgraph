// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BasePoolAdded extends ethereum.Event {
  get params(): BasePoolAdded__Params {
    return new BasePoolAdded__Params(this);
  }
}

export class BasePoolAdded__Params {
  _event: BasePoolAdded;

  constructor(event: BasePoolAdded) {
    this._event = event;
  }

  get base_pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PlainPoolDeployed extends ethereum.Event {
  get params(): PlainPoolDeployed__Params {
    return new PlainPoolDeployed__Params(this);
  }
}

export class PlainPoolDeployed__Params {
  _event: PlainPoolDeployed;

  constructor(event: PlainPoolDeployed) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lp_token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get coins(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get A(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get deployer(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class MetaPoolDeployed extends ethereum.Event {
  get params(): MetaPoolDeployed__Params {
    return new MetaPoolDeployed__Params(this);
  }
}

export class MetaPoolDeployed__Params {
  _event: MetaPoolDeployed;

  constructor(event: MetaPoolDeployed) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lp_token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get coins(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get base_pool(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get A(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get deployer(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class Factory__get_meta_n_coinsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Factory__get_feesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Factory__get_coin_indicesResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class Factory__get_implementation_addressesResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  metapool_implementations(_base_pool: Address): Array<Address> {
    let result = super.call(
      "metapool_implementations",
      "metapool_implementations(address):(address[10])",
      [ethereum.Value.fromAddress(_base_pool)]
    );

    return result[0].toAddressArray();
  }

  try_metapool_implementations(
    _base_pool: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "metapool_implementations",
      "metapool_implementations(address):(address[10])",
      [ethereum.Value.fromAddress(_base_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  find_pool_for_coins(_from: Address, _to: Address): Address {
    let result = super.call(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address):(address)",
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    );

    return result[0].toAddress();
  }

  try_find_pool_for_coins(
    _from: Address,
    _to: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address):(address)",
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  find_pool_for_coins1(_from: Address, _to: Address, i: BigInt): Address {
    let result = super.call(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toAddress();
  }

  try_find_pool_for_coins1(
    _from: Address,
    _to: Address,
    i: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "find_pool_for_coins",
      "find_pool_for_coins(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_base_pool(_pool: Address): Address {
    let result = super.call(
      "get_base_pool",
      "get_base_pool(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toAddress();
  }

  try_get_base_pool(_pool: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_base_pool",
      "get_base_pool(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_n_coins(_pool: Address): BigInt {
    let result = super.call("get_n_coins", "get_n_coins(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_get_n_coins(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_n_coins",
      "get_n_coins(address):(uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_meta_n_coins(_pool: Address): Factory__get_meta_n_coinsResult {
    let result = super.call(
      "get_meta_n_coins",
      "get_meta_n_coins(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new Factory__get_meta_n_coinsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_get_meta_n_coins(
    _pool: Address
  ): ethereum.CallResult<Factory__get_meta_n_coinsResult> {
    let result = super.tryCall(
      "get_meta_n_coins",
      "get_meta_n_coins(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__get_meta_n_coinsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  get_coins(_pool: Address): Array<Address> {
    let result = super.call("get_coins", "get_coins(address):(address[4])", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toAddressArray();
  }

  try_get_coins(_pool: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("get_coins", "get_coins(address):(address[4])", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  get_underlying_coins(_pool: Address): Array<Address> {
    let result = super.call(
      "get_underlying_coins",
      "get_underlying_coins(address):(address[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toAddressArray();
  }

  try_get_underlying_coins(
    _pool: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "get_underlying_coins",
      "get_underlying_coins(address):(address[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  get_decimals(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_decimals",
      "get_decimals(address):(uint256[4])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_decimals(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_decimals",
      "get_decimals(address):(uint256[4])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_underlying_decimals(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_underlying_decimals",
      "get_underlying_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_underlying_decimals(
    _pool: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_underlying_decimals",
      "get_underlying_decimals(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_metapool_rates(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_metapool_rates",
      "get_metapool_rates(address):(uint256[2])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_metapool_rates(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_metapool_rates",
      "get_metapool_rates(address):(uint256[2])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_balances",
      "get_balances(address):(uint256[4])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_balances",
      "get_balances(address):(uint256[4])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_underlying_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_underlying_balances",
      "get_underlying_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_underlying_balances(
    _pool: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_underlying_balances",
      "get_underlying_balances(address):(uint256[8])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_A(_pool: Address): BigInt {
    let result = super.call("get_A", "get_A(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_get_A(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("get_A", "get_A(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_fees(_pool: Address): Factory__get_feesResult {
    let result = super.call("get_fees", "get_fees(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return new Factory__get_feesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_get_fees(_pool: Address): ethereum.CallResult<Factory__get_feesResult> {
    let result = super.tryCall(
      "get_fees",
      "get_fees(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__get_feesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  get_admin_balances(_pool: Address): Array<BigInt> {
    let result = super.call(
      "get_admin_balances",
      "get_admin_balances(address):(uint256[4])",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigIntArray();
  }

  try_get_admin_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_admin_balances",
      "get_admin_balances(address):(uint256[4])",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): Factory__get_coin_indicesResult {
    let result = super.call(
      "get_coin_indices",
      "get_coin_indices(address,address,address):(int128,int128,bool)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return new Factory__get_coin_indicesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): ethereum.CallResult<Factory__get_coin_indicesResult> {
    let result = super.tryCall(
      "get_coin_indices",
      "get_coin_indices(address,address,address):(int128,int128,bool)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__get_coin_indicesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  get_implementation_addresses(
    _pool: Address
  ): Factory__get_implementation_addressesResult {
    let result = super.call(
      "get_implementation_addresses",
      "get_implementation_addresses(address):(address,address)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new Factory__get_implementation_addressesResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_get_implementation_addresses(
    _pool: Address
  ): ethereum.CallResult<Factory__get_implementation_addressesResult> {
    let result = super.tryCall(
      "get_implementation_addresses",
      "get_implementation_addresses(address):(address,address)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__get_implementation_addressesResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  is_meta(_pool: Address): boolean {
    let result = super.call("is_meta", "is_meta(address):(bool)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBoolean();
  }

  try_is_meta(_pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("is_meta", "is_meta(address):(bool)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  get_pool_asset_type(_pool: Address): BigInt {
    let result = super.call(
      "get_pool_asset_type",
      "get_pool_asset_type(address):(uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toBigInt();
  }

  try_get_pool_asset_type(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_pool_asset_type",
      "get_pool_asset_type(address):(uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deploy_plain_pool(
    _name: string,
    _symbol: string,
    _coins: Array<Address>,
    _A: BigInt,
    _fee: BigInt
  ): Address {
    let result = super.call(
      "deploy_plain_pool",
      "deploy_plain_pool(string,string,address[4],uint256,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddressArray(_coins),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_plain_pool(
    _name: string,
    _symbol: string,
    _coins: Array<Address>,
    _A: BigInt,
    _fee: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_plain_pool",
      "deploy_plain_pool(string,string,address[4],uint256,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddressArray(_coins),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy_plain_pool1(
    _name: string,
    _symbol: string,
    _coins: Array<Address>,
    _A: BigInt,
    _fee: BigInt,
    _asset_type: BigInt
  ): Address {
    let result = super.call(
      "deploy_plain_pool",
      "deploy_plain_pool(string,string,address[4],uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddressArray(_coins),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromUnsignedBigInt(_asset_type)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_plain_pool1(
    _name: string,
    _symbol: string,
    _coins: Array<Address>,
    _A: BigInt,
    _fee: BigInt,
    _asset_type: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_plain_pool",
      "deploy_plain_pool(string,string,address[4],uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddressArray(_coins),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromUnsignedBigInt(_asset_type)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy_plain_pool2(
    _name: string,
    _symbol: string,
    _coins: Array<Address>,
    _A: BigInt,
    _fee: BigInt,
    _asset_type: BigInt,
    _implementation_idx: BigInt
  ): Address {
    let result = super.call(
      "deploy_plain_pool",
      "deploy_plain_pool(string,string,address[4],uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddressArray(_coins),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromUnsignedBigInt(_asset_type),
        ethereum.Value.fromUnsignedBigInt(_implementation_idx)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_plain_pool2(
    _name: string,
    _symbol: string,
    _coins: Array<Address>,
    _A: BigInt,
    _fee: BigInt,
    _asset_type: BigInt,
    _implementation_idx: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_plain_pool",
      "deploy_plain_pool(string,string,address[4],uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddressArray(_coins),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromUnsignedBigInt(_asset_type),
        ethereum.Value.fromUnsignedBigInt(_implementation_idx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy_metapool(
    _base_pool: Address,
    _name: string,
    _symbol: string,
    _coin: Address,
    _A: BigInt,
    _fee: BigInt
  ): Address {
    let result = super.call(
      "deploy_metapool",
      "deploy_metapool(address,string,string,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_base_pool),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_coin),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_metapool(
    _base_pool: Address,
    _name: string,
    _symbol: string,
    _coin: Address,
    _A: BigInt,
    _fee: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_metapool",
      "deploy_metapool(address,string,string,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_base_pool),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_coin),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy_metapool1(
    _base_pool: Address,
    _name: string,
    _symbol: string,
    _coin: Address,
    _A: BigInt,
    _fee: BigInt,
    _implementation_idx: BigInt
  ): Address {
    let result = super.call(
      "deploy_metapool",
      "deploy_metapool(address,string,string,address,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_base_pool),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_coin),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromUnsignedBigInt(_implementation_idx)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_metapool1(
    _base_pool: Address,
    _name: string,
    _symbol: string,
    _coin: Address,
    _A: BigInt,
    _fee: BigInt,
    _implementation_idx: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_metapool",
      "deploy_metapool(address,string,string,address,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_base_pool),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_coin),
        ethereum.Value.fromUnsignedBigInt(_A),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromUnsignedBigInt(_implementation_idx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  convert_metapool_fees(): boolean {
    let result = super.call(
      "convert_metapool_fees",
      "convert_metapool_fees():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_convert_metapool_fees(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "convert_metapool_fees",
      "convert_metapool_fees():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  future_admin(): Address {
    let result = super.call("future_admin", "future_admin():(address)", []);

    return result[0].toAddress();
  }

  try_future_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("future_admin", "future_admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool_list(arg0: BigInt): Address {
    let result = super.call("pool_list", "pool_list(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_pool_list(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pool_list", "pool_list(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool_count(): BigInt {
    let result = super.call("pool_count", "pool_count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pool_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pool_count", "pool_count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  base_pool_list(arg0: BigInt): Address {
    let result = super.call(
      "base_pool_list",
      "base_pool_list(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toAddress();
  }

  try_base_pool_list(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "base_pool_list",
      "base_pool_list(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  base_pool_count(): BigInt {
    let result = super.call(
      "base_pool_count",
      "base_pool_count():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_base_pool_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "base_pool_count",
      "base_pool_count():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  plain_implementations(arg0: BigInt, arg1: BigInt): Address {
    let result = super.call(
      "plain_implementations",
      "plain_implementations(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );

    return result[0].toAddress();
  }

  try_plain_implementations(
    arg0: BigInt,
    arg1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "plain_implementations",
      "plain_implementations(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token_implementation(): Address {
    let result = super.call(
      "token_implementation",
      "token_implementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_token_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "token_implementation",
      "token_implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee_receiver(): Address {
    let result = super.call("fee_receiver", "fee_receiver():(address)", []);

    return result[0].toAddress();
  }

  try_fee_receiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("fee_receiver", "fee_receiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_pool_from_lp_token(arg0: Address): Address {
    let result = super.call(
      "get_pool_from_lp_token",
      "get_pool_from_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toAddress();
  }

  try_get_pool_from_lp_token(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_pool_from_lp_token",
      "get_pool_from_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get_lp_token(arg0: Address): Address {
    let result = super.call("get_lp_token", "get_lp_token(address):(address)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toAddress();
  }

  try_get_lp_token(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "get_lp_token",
      "get_lp_token(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token_implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fee_receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Deploy_plain_poolCall extends ethereum.Call {
  get inputs(): Deploy_plain_poolCall__Inputs {
    return new Deploy_plain_poolCall__Inputs(this);
  }

  get outputs(): Deploy_plain_poolCall__Outputs {
    return new Deploy_plain_poolCall__Outputs(this);
  }
}

export class Deploy_plain_poolCall__Inputs {
  _call: Deploy_plain_poolCall;

  constructor(call: Deploy_plain_poolCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _coins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _A(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class Deploy_plain_poolCall__Outputs {
  _call: Deploy_plain_poolCall;

  constructor(call: Deploy_plain_poolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Deploy_plain_pool1Call extends ethereum.Call {
  get inputs(): Deploy_plain_pool1Call__Inputs {
    return new Deploy_plain_pool1Call__Inputs(this);
  }

  get outputs(): Deploy_plain_pool1Call__Outputs {
    return new Deploy_plain_pool1Call__Outputs(this);
  }
}

export class Deploy_plain_pool1Call__Inputs {
  _call: Deploy_plain_pool1Call;

  constructor(call: Deploy_plain_pool1Call) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _coins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _A(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _asset_type(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class Deploy_plain_pool1Call__Outputs {
  _call: Deploy_plain_pool1Call;

  constructor(call: Deploy_plain_pool1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Deploy_plain_pool2Call extends ethereum.Call {
  get inputs(): Deploy_plain_pool2Call__Inputs {
    return new Deploy_plain_pool2Call__Inputs(this);
  }

  get outputs(): Deploy_plain_pool2Call__Outputs {
    return new Deploy_plain_pool2Call__Outputs(this);
  }
}

export class Deploy_plain_pool2Call__Inputs {
  _call: Deploy_plain_pool2Call;

  constructor(call: Deploy_plain_pool2Call) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _coins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _A(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _asset_type(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _implementation_idx(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class Deploy_plain_pool2Call__Outputs {
  _call: Deploy_plain_pool2Call;

  constructor(call: Deploy_plain_pool2Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Deploy_metapoolCall extends ethereum.Call {
  get inputs(): Deploy_metapoolCall__Inputs {
    return new Deploy_metapoolCall__Inputs(this);
  }

  get outputs(): Deploy_metapoolCall__Outputs {
    return new Deploy_metapoolCall__Outputs(this);
  }
}

export class Deploy_metapoolCall__Inputs {
  _call: Deploy_metapoolCall;

  constructor(call: Deploy_metapoolCall) {
    this._call = call;
  }

  get _base_pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _coin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _A(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class Deploy_metapoolCall__Outputs {
  _call: Deploy_metapoolCall;

  constructor(call: Deploy_metapoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Deploy_metapool1Call extends ethereum.Call {
  get inputs(): Deploy_metapool1Call__Inputs {
    return new Deploy_metapool1Call__Inputs(this);
  }

  get outputs(): Deploy_metapool1Call__Outputs {
    return new Deploy_metapool1Call__Outputs(this);
  }
}

export class Deploy_metapool1Call__Inputs {
  _call: Deploy_metapool1Call;

  constructor(call: Deploy_metapool1Call) {
    this._call = call;
  }

  get _base_pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _coin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _A(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _implementation_idx(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class Deploy_metapool1Call__Outputs {
  _call: Deploy_metapool1Call;

  constructor(call: Deploy_metapool1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Add_base_poolCall extends ethereum.Call {
  get inputs(): Add_base_poolCall__Inputs {
    return new Add_base_poolCall__Inputs(this);
  }

  get outputs(): Add_base_poolCall__Outputs {
    return new Add_base_poolCall__Outputs(this);
  }
}

export class Add_base_poolCall__Inputs {
  _call: Add_base_poolCall;

  constructor(call: Add_base_poolCall) {
    this._call = call;
  }

  get _base_pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lp_token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _n_coins(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _asset_type(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _implementations(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class Add_base_poolCall__Outputs {
  _call: Add_base_poolCall;

  constructor(call: Add_base_poolCall) {
    this._call = call;
  }
}

export class Set_metapool_implementationsCall extends ethereum.Call {
  get inputs(): Set_metapool_implementationsCall__Inputs {
    return new Set_metapool_implementationsCall__Inputs(this);
  }

  get outputs(): Set_metapool_implementationsCall__Outputs {
    return new Set_metapool_implementationsCall__Outputs(this);
  }
}

export class Set_metapool_implementationsCall__Inputs {
  _call: Set_metapool_implementationsCall;

  constructor(call: Set_metapool_implementationsCall) {
    this._call = call;
  }

  get _base_pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _implementations(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class Set_metapool_implementationsCall__Outputs {
  _call: Set_metapool_implementationsCall;

  constructor(call: Set_metapool_implementationsCall) {
    this._call = call;
  }
}

export class Set_plain_implementationsCall extends ethereum.Call {
  get inputs(): Set_plain_implementationsCall__Inputs {
    return new Set_plain_implementationsCall__Inputs(this);
  }

  get outputs(): Set_plain_implementationsCall__Outputs {
    return new Set_plain_implementationsCall__Outputs(this);
  }
}

export class Set_plain_implementationsCall__Inputs {
  _call: Set_plain_implementationsCall;

  constructor(call: Set_plain_implementationsCall) {
    this._call = call;
  }

  get _n_coins(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _implementations(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class Set_plain_implementationsCall__Outputs {
  _call: Set_plain_implementationsCall;

  constructor(call: Set_plain_implementationsCall) {
    this._call = call;
  }
}

export class Set_token_implementationCall extends ethereum.Call {
  get inputs(): Set_token_implementationCall__Inputs {
    return new Set_token_implementationCall__Inputs(this);
  }

  get outputs(): Set_token_implementationCall__Outputs {
    return new Set_token_implementationCall__Outputs(this);
  }
}

export class Set_token_implementationCall__Inputs {
  _call: Set_token_implementationCall;

  constructor(call: Set_token_implementationCall) {
    this._call = call;
  }

  get _token_implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_token_implementationCall__Outputs {
  _call: Set_token_implementationCall;

  constructor(call: Set_token_implementationCall) {
    this._call = call;
  }
}

export class Batch_set_pool_asset_typeCall extends ethereum.Call {
  get inputs(): Batch_set_pool_asset_typeCall__Inputs {
    return new Batch_set_pool_asset_typeCall__Inputs(this);
  }

  get outputs(): Batch_set_pool_asset_typeCall__Outputs {
    return new Batch_set_pool_asset_typeCall__Outputs(this);
  }
}

export class Batch_set_pool_asset_typeCall__Inputs {
  _call: Batch_set_pool_asset_typeCall;

  constructor(call: Batch_set_pool_asset_typeCall) {
    this._call = call;
  }

  get _pools(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _asset_types(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class Batch_set_pool_asset_typeCall__Outputs {
  _call: Batch_set_pool_asset_typeCall;

  constructor(call: Batch_set_pool_asset_typeCall) {
    this._call = call;
  }
}

export class Commit_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Commit_transfer_ownershipCall__Inputs {
    return new Commit_transfer_ownershipCall__Inputs(this);
  }

  get outputs(): Commit_transfer_ownershipCall__Outputs {
    return new Commit_transfer_ownershipCall__Outputs(this);
  }
}

export class Commit_transfer_ownershipCall__Inputs {
  _call: Commit_transfer_ownershipCall;

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Commit_transfer_ownershipCall__Outputs {
  _call: Commit_transfer_ownershipCall;

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Accept_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Accept_transfer_ownershipCall__Inputs {
    return new Accept_transfer_ownershipCall__Inputs(this);
  }

  get outputs(): Accept_transfer_ownershipCall__Outputs {
    return new Accept_transfer_ownershipCall__Outputs(this);
  }
}

export class Accept_transfer_ownershipCall__Inputs {
  _call: Accept_transfer_ownershipCall;

  constructor(call: Accept_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Accept_transfer_ownershipCall__Outputs {
  _call: Accept_transfer_ownershipCall;

  constructor(call: Accept_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Set_managerCall extends ethereum.Call {
  get inputs(): Set_managerCall__Inputs {
    return new Set_managerCall__Inputs(this);
  }

  get outputs(): Set_managerCall__Outputs {
    return new Set_managerCall__Outputs(this);
  }
}

export class Set_managerCall__Inputs {
  _call: Set_managerCall;

  constructor(call: Set_managerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_managerCall__Outputs {
  _call: Set_managerCall;

  constructor(call: Set_managerCall) {
    this._call = call;
  }
}

export class Set_fee_receiverCall extends ethereum.Call {
  get inputs(): Set_fee_receiverCall__Inputs {
    return new Set_fee_receiverCall__Inputs(this);
  }

  get outputs(): Set_fee_receiverCall__Outputs {
    return new Set_fee_receiverCall__Outputs(this);
  }
}

export class Set_fee_receiverCall__Inputs {
  _call: Set_fee_receiverCall;

  constructor(call: Set_fee_receiverCall) {
    this._call = call;
  }

  get _fee_receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_fee_receiverCall__Outputs {
  _call: Set_fee_receiverCall;

  constructor(call: Set_fee_receiverCall) {
    this._call = call;
  }
}

export class Convert_metapool_feesCall extends ethereum.Call {
  get inputs(): Convert_metapool_feesCall__Inputs {
    return new Convert_metapool_feesCall__Inputs(this);
  }

  get outputs(): Convert_metapool_feesCall__Outputs {
    return new Convert_metapool_feesCall__Outputs(this);
  }
}

export class Convert_metapool_feesCall__Inputs {
  _call: Convert_metapool_feesCall;

  constructor(call: Convert_metapool_feesCall) {
    this._call = call;
  }
}

export class Convert_metapool_feesCall__Outputs {
  _call: Convert_metapool_feesCall;

  constructor(call: Convert_metapool_feesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
